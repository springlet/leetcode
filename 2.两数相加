给定两个非空链表来表示两个非负整数。位数按照逆序方式存储，它们的每个节点只存储单个数字。将两数相加返回一个新的链表。

你可以假设除了数字 0 之外，这两个数字都不会以零开头。

示例：

输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)
输出：7 -> 0 -> 8
原因：342 + 465 = 807

解法：
链表对应结点相加时增加前一个结点的进位，并保存下一个结点的进位；
两个链表长度不一致时，要处理较长链表剩余的高位和进位计算的值；
如果最高位计算时还产生进位，则还需要添加一个额外结点。

这道并不是什么难题，算法很简单，链表的数据类型也不难。就是建立一个新链表，
然后把输入的两个链表从头往后撸，每两个相加，添加一个新节点到新链表后面，
就是要处理下进位问题。还有就是最高位的进位问题要最后特殊处理一下

public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode dummy = new ListNode(-1);
        ListNode cur = dummy;
        int carry = 0;
        while (l1 != null || l2 != null) {
            int d1 = l1 == null?0:l1.val;
            int d2 = l2 == null?0:l2.val;
            int sum = d1 + d2 + carry;
            carry = sum >= 10?1:0;
            cur.next = new ListNode(sum % 10);
            cur = cur.next;
            if (l1 != null) l1 = l1.next;
            if (l2 != null) l2 = l2.next;
        }
        if (carry == 1) cur.next = new ListNode(1);
        return dummy.next;
    }

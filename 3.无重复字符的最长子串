
给定一个字符串，找出不含有重复字符的最长子串的长度。

示例：

给定 "abcabcbb" ，没有重复字符的最长子串是 "abc" ，那么长度就是3。

给定 "bbbbb" ，最长的子串就是 "b" ，长度是1。

给定 "pwwkew" ，最长子串是 "wke" ，长度是3。请注意答案必须是一个子串，"pwke" 是 子序列  而不是子串

解法：
这道求最长无重复子串的题和之前那道 Isomorphic Strings 同构字符串很类似，
我们还是建立一个256位大小的整型数组来代替哈希表，这样做的原因是ASCII表共能表示256个字符，
所以可以记录所有字符，然后我们需要定义两个变量res和left，其中res用来记录最长无重复子串的长度，
left指向该无重复子串左边的起始位置，然后我们遍历整个字符串，对于每一个遍历到的字符，
如果哈希表中该字符串对应的值为0，说明没有遇到过该字符，则此时计算最长无重复子串，
i - left +１，其中ｉ是最长无重复子串最右边的位置，left是最左边的位置，
还有一种情况也需要计算最长无重复子串，就是当哈希表中的值小于left，这是由于此时出现过重复的字符，
left的位置更新了，如果又遇到了新的字符，就要重新计算最长无重复子串。最后每次都要在哈希表中将当前字符对应的值赋值为i+1。

下面这种解法使用了set，核心算法和上面的很类似，把出现过的字符都放入set中，遇到set中没有的字符就加入set中并更新结果res，
如果遇到重复的，则从左边开始删字符，直到删到重复的字符停止：

public int lengthOfLongestSubstring(String s) {
        int res = 0, left = 0, right = 0;
        HashSet<Character> t = new HashSet<>();
        while (right < s.length()) {
            if (!t.contains(s.charAt(right))) {
                t.add(s.charAt(right++));
                res = Math.max(res, t.size());
            } else {
                t.remove(s.charAt(left++));
            }
        }
        return res;
    }
